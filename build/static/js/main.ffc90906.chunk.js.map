{"version":3,"sources":["game.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","setState","Array","fill","xturn","renderSquare","React","Component","Game","state","history","stepnum","hist","slice","sq","length","calculateWinner","concat","step","status","current","winner","moves","map","move","desc","jumpTo","checknull","handleClick","reset_Board","lines","a","b","c","ReactDOM","render","document","getElementById","useCustomTime","width","border","borderColor","baseColor","centerColor","centerBorderColor","handColors","second","minute","hour"],"mappings":"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","file":"static/js/main.ffc90906.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n// class Square extends React.Component {\n//   render() {\n//     return (\n//       <button className=\"square\" onClick = {() => this.props.onClick()}>\n//         {this.props.value}\n//       </button>\n//     );\n//   }\n// }\n\nfunction Square(props){\n    return (\n      <button className=\"square\" onClick = {props.onClick}>\n        {props.value}\n      </button>\n    );\n   \n}\nclass Board extends React.Component {\n  // constructor(props){\n  //   super(props);\n  //   this.state={\n  //     squares: Array(9).fill(null),\n  //     xturn: true}\n\n  // }\n  \n  renderSquare(i) {\n    return <Square value={this.props.squares[i]}\n    onClick={()=>this.props.onClick(i)}\n    />;\n  }\n  reset_Board()\n  {\n    this.setState({squares: Array(9).fill(null),\n      xturn: true});\n    \n  }\n  \n  render() {\n    // const winner= calculateWinner(this.state.squares);\n    // let status;\n    \n    return (\n      <div>\n        {/* <div className=\"status\">{status}</div> */}\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n        {/* <button onClick = {() => this.props.reset_Board()}> {\"Restart Game\"}</button> */}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props)\n  {\n    super(props);\n    this.state={history:[{squares: Array(9).fill(null)}], \n  xturn: true,\n  stepnum: 0}\n  \n  }\n\n  handleClick(i)\n  {\n    const hist= this.state.history.slice(0,this.state.stepnum+1);;\n    const current= hist[hist.length-1];\n    const sq= current.squares.slice();\n    \n    if(calculateWinner(sq) || sq[i]){\n      return;}\n    sq[i]=this.state.xturn ? 'X' : 'O';\n\n    this.setState({\n      history: hist.concat([{squares: sq}]),\n      xturn: !this.state.xturn,\n      stepnum: hist.length\n    });\n  }\n  reset_Board()\n  {\n    this.setState({history:[{squares: Array(9).fill(null)}], \n                  xturn: true,\n                  stepnum: 0});\n  }\n  jumpTo(step)\n  {\n    this.setState({stepnum: step,\n    xturn: (step%2)=== 0,\n  })\n  }\n  render() {\n    const history= this.state.history;\n    const current= history[this.state.stepnum];\n    const winner= calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key = {move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status\n    if(winner)\n    {\n      status = \"Winner: \" + winner +  \" !!! Start New Match !!!\";\n    }\n    else\n    {\n      status='Player Turn: ' + (this.state.xturn ? 'X' : 'O');\n    }\n    let allfill = checknull(current.squares);\n    if(allfill && !winner)\n    {\n      status=\"Game Draw !!! Restart Match \"\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={current.squares}\n          onClick={(i) => this.handleClick(i)}/>\n        </div>\n        \n        <div className=\"game-info\">\n          <div className=\"status\">{status}</div>\n          <div>\n          <button onClick = {() => this.reset_Board()}>\n            {\"Restart Game\"}\n          </button>\n        </div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\nfunction checknull(squares)\n{\n  for(let i=0;i<squares.length; i++)\n  {\n      if(squares[i]==null)\n      {\n        return false;\n      }\n  }\n  return true;\n}\n\nexport default Game","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './game.js'\nimport AnalogClock from 'analog-clock-react';\n// class Square extends React.Component {\n//   render() {\n//     return (\n//       <button className=\"square\" onClick = {() => this.props.onClick()}>\n//         {this.props.value}\n//       </button>\n//     );\n//   }\n// }\n\n  let options={\n    useCustomTime: false,\n    width: \"300px\",\n    border: true,\n    borderColor: \"#2e2e2e\",\n    baseColor: \"#17a2b8\",\n    centerColor: \"#459cff\",\n    centerBorderColor: \"#fff\",\n    handColors: {\n      second: \"#d81c7a\",\n      minute: \"#fff\",\n      hour: \"#fff\"\n    }\n  };\n\n\n\n\n\n\n// ========================================\n\nReactDOM.render(\n  <div>\n  <Game />\n  <AnalogClock {...options}/>\n  </div>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}